{"ast":null,"code":"import _regeneratorRuntime from \"/home/andy/Desktop/campus_buddy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/andy/Desktop/campus_buddy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var refreshTokenSetup = function refreshTokenSetup(res) {\n  // Timing to renew access token\n  var refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\n\n  var refreshToken = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var newAuthRes;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return res.reloadAuthResponse();\n\n            case 2:\n              newAuthRes = _context.sent;\n              refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\n              console.log('newAuthRes:', newAuthRes); // saveUserToken(newAuthRes.access_token);  <-- save new token\n\n              localStorage.setItem('authToken', newAuthRes.id_token); // Setup the other timer after the first one\n\n              setTimeout(refreshToken, refreshTiming);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function refreshToken() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // Setup first refresh timer\n\n\n  setTimeout(refreshToken, refreshTiming);\n};","map":{"version":3,"sources":["/home/andy/Desktop/campus_buddy/frontend/src/utils/refreshToken.js"],"names":["refreshTokenSetup","res","refreshTiming","tokenObj","expires_in","refreshToken","reloadAuthResponse","newAuthRes","console","log","localStorage","setItem","id_token","setTimeout"],"mappings":";;AAAA,OAAO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,GAAD,EAAS;AACtC;AACA,MAAIC,aAAa,GAAG,CAACD,GAAG,CAACE,QAAJ,CAAaC,UAAb,IAA2B,OAAO,IAAI,EAAvC,IAA6C,IAAjE;;AAEA,MAAMC,YAAY;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQJ,GAAG,CAACK,kBAAJ,EADR;;AAAA;AACXC,cAAAA,UADW;AAEjBL,cAAAA,aAAa,GAAG,CAACK,UAAU,CAACH,UAAX,IAAyB,OAAO,IAAI,EAArC,IAA2C,IAA3D;AACAI,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,UAA3B,EAHiB,CAIjB;;AACAG,cAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCJ,UAAU,CAACK,QAA7C,EALiB,CAOjB;;AACAC,cAAAA,UAAU,CAACR,YAAD,EAAeH,aAAf,CAAV;;AARiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZG,YAAY;AAAA;AAAA;AAAA,KAAlB,CAJsC,CAetC;;;AACAQ,EAAAA,UAAU,CAACR,YAAD,EAAeH,aAAf,CAAV;AACH,CAjBM","sourcesContent":["export const refreshTokenSetup = (res) => {\n    // Timing to renew access token\n    let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\n\n    const refreshToken = async () => {\n        const newAuthRes = await res.reloadAuthResponse();\n        refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\n        console.log('newAuthRes:', newAuthRes);\n        // saveUserToken(newAuthRes.access_token);  <-- save new token\n        localStorage.setItem('authToken', newAuthRes.id_token);\n\n        // Setup the other timer after the first one\n        setTimeout(refreshToken, refreshTiming);\n    };\n\n    // Setup first refresh timer\n    setTimeout(refreshToken, refreshTiming);\n};\n"]},"metadata":{},"sourceType":"module"}